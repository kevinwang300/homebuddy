{"version":3,"sources":["logo.svg","App.js","Map.js","Container.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Map","_Component","props","_this","Object","classCallCheck","this","_this$props$initialCe","possibleConstructorReturn","getPrototypeOf","call","initialCenter","lat","lng","directionsService","google","maps","DirectionsService","directionsDisplay","DirectionsRenderer","state","currentLocation","inherits","createClass","key","value","_this2","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","recenterMap","haight","LatLng","mapRef","refs","map","node","ReactDOM","findDOMNode","_this$props","zoom","_this$state$currentLo","mapConfig","assign","center","setMap","calcRoute","curr","panTo","_this3","request","origin","destination","travelMode","TravelMode","console","log","route","response","status","setDirections","react_default","a","createElement","ref","style","width","height","float","defaultProps","Container","apply","arguments","Map_Map","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","render","src_Container","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4LCItBC,mBCALC,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,IAAAO,GACfJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAJ,GAAAU,KAAAJ,KAAMJ,KAEkBA,MAAMS,cAAvBC,EAHQL,EAGRK,IAAKC,EAHGN,EAGHM,IAENC,EAAoBX,EAAKD,OAASC,EAAKD,MAAMa,OAC/C,IAAIZ,EAAKD,MAAMa,OAAOC,KAAKC,kBAAsB,KAE/CC,EAAoBf,EAAKD,OAASC,EAAKD,MAAMa,OAC/C,IAAIZ,EAAKD,MAAMa,OAAOC,KAAKG,mBAAuB,KATvC,OAWfhB,EAAKiB,MAAQ,CACTC,gBAAiB,CACbT,IAAKA,EACLC,IAAKA,GAETC,kBAAmBA,EACnBI,kBAAmBA,GAjBRf,EADvB,OAAAC,OAAAkB,EAAA,EAAAlB,CAAAJ,EAAAC,GAAAG,OAAAmB,EAAA,EAAAnB,CAAAJ,EAAA,EAAAwB,IAAA,oBAAAC,MAAA,WAsBwB,IAAAC,EAAApB,KAEZA,KAAKJ,MAAMyB,6BACPC,WAAaA,UAAUC,aACvBD,UAAUC,YAAYC,mBAAmB,SAACC,GACtC,IAAMC,EAASD,EAAIC,OACnBN,EAAKO,SAAS,CACVZ,gBAAiB,CACbT,IAAKoB,EAAOE,SACZrB,IAAKmB,EAAOG,eAMhC7B,KAAK8B,YArCb,CAAAZ,IAAA,qBAAAC,MAAA,SAwCuBY,EAAWC,GACtBD,EAAUtB,SAAWT,KAAKJ,MAAMa,QAChCT,KAAK8B,UAELE,EAAUjB,kBAAoBf,KAAKc,MAAMC,iBACzCf,KAAKiC,gBA7CjB,CAAAf,IAAA,UAAAC,MAAA,WAkDQ,GAAInB,KAAKJ,OAASI,KAAKJ,MAAMa,OAAQ,KAG3BC,EADWV,KAAKJ,MAAfa,OACaC,KAKhBwB,EAAS,IAAIxB,EAAKyB,OAAO,YAAa,aAGpCC,GAFW,IAAI1B,EAAKyB,OAAO,kBAAmB,oBAErCnC,KAAKqC,KAAKC,KACnBC,EAAOC,IAASC,YAAYL,GAZDM,EAcL1C,KAAKJ,MAAb+C,GAdaD,EAc5BrC,cAd4BqC,EAcbC,MAdaC,EAkBd5C,KAAKc,MAAMC,gBAAvBT,EAlB0BsC,EAkB1BtC,IAAKC,EAlBqBqC,EAkBrBrC,IAGNsC,GADS,IAAInC,EAAKyB,OAAO7B,EAAKC,GAClBT,OAAOgD,OAAO,GAAI,CAEhCC,OAAQb,EACRS,KAAMA,KAEV3C,KAAKsC,IAAM,IAAI5B,EAAKhB,IAAI6C,EAAMM,GAC9B7C,KAAKc,MAAMF,kBAAkBoC,OAAOhD,KAAKsC,KACzCtC,KAAKiD,eA9EjB,CAAA/B,IAAA,cAAAC,MAAA,WA+FQ,IAAMmB,EAAMtC,KAAKsC,IACXY,EAAOlD,KAAKc,MAAMC,gBAGlBL,EADSV,KAAKJ,MAAMa,OACNC,KAEpB,GAAI4B,EAAK,CACL,IAAIS,EAAS,IAAIrC,EAAKyB,OAAOe,EAAK5C,IAAK4C,EAAK3C,KAC5C+B,EAAIa,MAAMJ,MAvGtB,CAAA7B,IAAA,YAAAC,MAAA,WA2GgB,IAAAiC,EAAApD,KAEFU,EADSV,KAAKJ,MAAMa,OACNC,KAMhB2C,EAAU,CACVC,OALS,IAAI5C,EAAKyB,OAAO,YAAa,aAMtCoB,YALa,IAAI7C,EAAKyB,OAAO,kBAAmB,oBAShDqB,WAAY9C,EAAK+C,WAAL,SAGhBC,QAAQC,IAAI3D,KAAKc,OAEjBd,KAAKc,MAAMN,kBAAkBoD,MAAMP,EAAS,SAACQ,EAAUC,GACnDJ,QAAQC,IAAI,aAAcE,GAC1BH,QAAQC,IAAI,WAAYG,GACT,OAAXA,GACAV,EAAKtC,MAAMF,kBAAkBmD,cAAcF,OAlI3D,CAAA3C,IAAA,SAAAC,MAAA,WAmJQ,OACI6C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,MAAMC,MAbN,CACbC,MAAO,OACPC,OAAQ,QACRC,MAAO,UAUH,kBAGAP,EAAAC,EAAAC,cAAA,OAAKC,IAAI,kBAAkBC,MAVN,CACzBC,MAAO,OACPC,OAAQ,UAQJ,oCAxJhB5E,EAAA,CAAyBD,aAuKzBC,EAAI8E,aAAe,CACf7B,KAAM,GAENtC,cAAe,CACXC,IAAK,UACLC,KAAM,YAEVc,6BAA6B,GC9K1B,IAAMoD,EAAb,SAAA9E,GAAA,SAAA8E,IAAA,OAAA3E,OAAAC,EAAA,EAAAD,CAAAE,KAAAyE,GAAA3E,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAA2E,GAAAC,MAAA1E,KAAA2E,YAAA,OAAA7E,OAAAkB,EAAA,EAAAlB,CAAA2E,EAAA9E,GAAAG,OAAAmB,EAAA,EAAAnB,CAAA2E,EAAA,EAAAvD,IAAA,SAAAC,MAAA,WASQ,OAFAuC,QAAQC,IAAI3D,KAAKJ,OAGboE,EAAAC,EAAAC,cAAA,OAAKE,MARK,CACVC,MAAO,QACPC,OAAQ,UAOJN,EAAAC,EAAAC,cAACU,EAAD,CAAKnE,OAAQT,KAAKJ,MAAMa,cAXxCgE,EAAA,CAA+BhF,aAiBhBoF,6BAAiB,CAC5BC,OAAQ,2CADGD,CAEZJ,GCXiBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN3C,IAAS4C,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBjE,WACrBA,UAAUkE,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fea8a13b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDfaCamdV4CSw1jBTG8NZeem0YG6kguM3s&callback=initMap\";\n    script.async = true;\n    script.defer = true;\n  }\n\n  render() {\n    // let map = new google.maps.Map(document.getElementById('map'), {\n    //   center: {lat: -34.397, lng: 150.644},\n    //   zoom: 8\n    // });\n\n    return (\n        <div id={\"map\"}></div>\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport class Map extends Component {\n    constructor(props) {\n        super(props);\n\n        const {lat, lng} = this.props.initialCenter;\n\n        const directionsService = this.props && this.props.google ?\n            new this.props.google.maps.DirectionsService() : null;\n\n        const directionsDisplay = this.props && this.props.google ?\n            new this.props.google.maps.DirectionsRenderer() : null;\n\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            },\n            directionsService: directionsService,\n            directionsDisplay: directionsDisplay\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.centerAroundCurrentLocation);\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((pos) => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    })\n                })\n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    loadMap() {\n        if (this.props && this.props.google) {\n            // google is available\n            const {google} = this.props;\n            const maps = google.maps;\n\n            // let directionsService = new maps.DirectionsService();\n            // let directionsDisplay = new maps.DirectionsRenderer();\n\n            let haight = new maps.LatLng(37.7699298, -122.4469157);\n            let oceanBeach = new maps.LatLng(37.7683909618184, -122.51089453697205);\n\n            const mapRef = this.refs.map;\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            let {initialCenter, zoom} = this.props;\n\n\n            // let {lat, lng} = initialCenter;\n            const {lat, lng} = this.state.currentLocation;\n\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign({}, {\n                // center: center,\n                center: haight,\n                zoom: zoom\n            });\n            this.map = new maps.Map(node, mapConfig);\n            this.state.directionsDisplay.setMap(this.map);\n            this.calcRoute();\n\n\n            // var directionsService = new google.maps.DirectionsService();\n            // var directionsDisplay = new google.maps.DirectionsRenderer();\n            // var haight = new google.maps.LatLng(37.7699298, -122.4469157);\n            // var oceanBeach = new google.maps.LatLng(37.7683909618184, -122.51089453697205);\n            // var mapOptions = {\n            //     zoom: 14,\n            //     center: haight\n            // }\n            // var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n            // directionsDisplay.setMap(map);\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const curr = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(curr.lat, curr.lng);\n            map.panTo(center);\n        }\n    }\n\n    calcRoute() {\n        const google = this.props.google;\n        const maps = google.maps;\n\n        let haight = new maps.LatLng(37.7699298, -122.4469157);\n        let oceanBeach = new maps.LatLng(37.7683909618184, -122.51089453697205);\n\n        // let selectedMode = document.getElementById('mode').value;\n        let request = {\n            origin: haight,\n            destination: oceanBeach,\n            // Note that Javascript allows us to access the constant\n            // using square brackets and a string value as its\n            // \"property.\"\n            travelMode: maps.TravelMode['DRIVING']\n        };\n\n        console.log(this.state);\n\n        this.state.directionsService.route(request, (response, status) => {\n            console.log('response: ', response);\n            console.log('status: ', status);\n            if (status === 'OK') {\n                this.state.directionsDisplay.setDirections(response);\n            }\n        });\n    }\n\n    render() {\n        const mapStyle = {\n            width: '70vw',\n            height: '100vh',\n            float: 'right'\n        };\n\n        const directionsPanelStyle = {\n            width: '30vw',\n            height: '100vh'\n        };\n\n        return (\n            <div>\n                <div ref='map' style={mapStyle}>\n                    Loading map...\n                </div>\n                <div ref='directionsPanel' style={directionsPanelStyle}>\n                    Loading directions panel...\n                </div>\n            </div>\n        )\n    }\n}\n\nMap.propTypes = {\n    google: PropTypes.object,\n    zoom: PropTypes.number,\n    initialCenter: PropTypes.object,\n    centerAroundCurrentLocation: PropTypes.bool\n};\n\nMap.defaultProps = {\n    zoom: 13,\n    // San Francisco, by default\n    initialCenter: {\n        lat: 37.774929,\n        lng: -122.419416\n    },\n    centerAroundCurrentLocation: false\n};\n","import React, { Component } from 'react';\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport { Map } from './Map';\n\nexport class Container extends Component {\n    render() {\n        const style = {\n            width: '100vw',\n            height: '100vh'\n        };\n\n        console.log(this.props);\n\n        return (\n            <div style={style}>\n                <Map google={this.props.google} />\n            </div>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: \"AIzaSyDfaCamdV4CSw1jBTG8NZeem0YG6kguM3s\"\n})(Container)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Container from './Container';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Container />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}