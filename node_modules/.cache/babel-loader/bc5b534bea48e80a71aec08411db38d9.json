{"ast":null,"code":"import _classCallCheck from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nexport var Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // console.log(this.props.centerAroundCurrentLocation);\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            var coords = pos.coords;\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      }\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        this.recenterMap();\n      }\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      console.log(\"loading map!\");\n\n      if (this.props && this.props.google) {\n        console.log(\"into loading\"); // google is available\n\n        var google = this.props.google;\n        var maps = google.maps;\n        var mapRef = this.refs.map;\n        var node = ReactDOM.findDOMNode(mapRef);\n        console.log(this.refs);\n        console.log(node);\n        var _this$props = this.props,\n            initialCenter = _this$props.initialCenter,\n            zoom = _this$props.zoom; // let {lat, lng} = initialCenter;\n\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n        console.log(lat, lng);\n        var center = new maps.LatLng(lat, lng);\n        var mapConfig = Object.assign({}, {\n          center: center,\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig);\n        console.log(this.map);\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var curr = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(curr.lat, curr.lng);\n        map.panTo(center);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = {\n        width: '100vw',\n        height: '100vh'\n      };\n      return React.createElement(\"div\", {\n        ref: \"map\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Loading map...\");\n    }\n  }]);\n\n  return Map;\n}(Component);\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool\n};\nMap.defaultProps = {\n  zoom: 13,\n  // San Francisco, by default\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: true\n};","map":{"version":3,"sources":["/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js"],"names":["React","Component","ReactDOM","PropTypes","Map","props","initialCenter","lat","lng","state","currentLocation","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","google","recenterMap","console","log","maps","mapRef","refs","map","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","curr","panTo","style","width","height","propTypes","object","number","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport class Map extends Component {\n    constructor(props) {\n        super(props);\n\n        const {lat, lng} = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.centerAroundCurrentLocation);\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((pos) => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    })\n                })\n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    loadMap() {\n        console.log(\"loading map!\");\n        if (this.props && this.props.google) {\n            console.log(\"into loading\");\n            // google is available\n            const {google} = this.props;\n            const maps = google.maps;\n\n            const mapRef = this.refs.map;\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            console.log(this.refs);\n            console.log(node);\n\n            let {initialCenter, zoom} = this.props;\n\n\n            // let {lat, lng} = initialCenter;\n            const {lat, lng} = this.state.currentLocation;\n\n            console.log(lat, lng);\n\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign({}, {\n                center: center,\n                zoom: zoom\n            });\n            this.map = new maps.Map(node, mapConfig);\n\n            console.log(this.map);\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const curr = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(curr.lat, curr.lng);\n            map.panTo(center);\n        }\n    }\n\n    render() {\n        const style = {\n            width: '100vw',\n            height: '100vh'\n        };\n\n        return (\n            <div ref='map' style={style}>\n                Loading map...\n            </div>\n        )\n    }\n}\n\nMap.propTypes = {\n    google: PropTypes.object,\n    zoom: PropTypes.number,\n    initialCenter: PropTypes.object,\n    centerAroundCurrentLocation: PropTypes.bool\n};\n\nMap.defaultProps = {\n    zoom: 13,\n    // San Francisco, by default\n    initialCenter: {\n        lat: 37.774929,\n        lng: -122.419416\n    },\n    centerAroundCurrentLocation: true\n};\n"]},"metadata":{},"sourceType":"module"}