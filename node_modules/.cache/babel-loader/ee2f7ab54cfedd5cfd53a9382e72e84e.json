{"ast":null,"code":"import _classCallCheck from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nexport var Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // console.log(this.props.centerAroundCurrentLocation);\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            var coords = pos.coords;\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      }\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        this.recenterMap();\n      }\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        // google is available\n        var google = this.props.google;\n        var maps = google.maps;\n        var directionsService = new maps.DirectionsService();\n        var directionsDisplay = new maps.DirectionsRenderer();\n        var haight = new maps.LatLng(37.7699298, -122.4469157);\n        var oceanBeach = new maps.LatLng(37.7683909618184, -122.51089453697205);\n        var mapRef = this.refs.map;\n        var node = ReactDOM.findDOMNode(mapRef);\n        var _this$props = this.props,\n            initialCenter = _this$props.initialCenter,\n            zoom = _this$props.zoom; // let {lat, lng} = initialCenter;\n\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n        var center = new maps.LatLng(lat, lng);\n        var mapConfig = Object.assign({}, {\n          // center: center,\n          center: haight,\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig);\n        directionsDisplay.setMap(this.map); // var directionsService = new google.maps.DirectionsService();\n        // var directionsDisplay = new google.maps.DirectionsRenderer();\n        // var haight = new google.maps.LatLng(37.7699298, -122.4469157);\n        // var oceanBeach = new google.maps.LatLng(37.7683909618184, -122.51089453697205);\n        // var mapOptions = {\n        //     zoom: 14,\n        //     center: haight\n        // }\n        // var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n        // directionsDisplay.setMap(map);\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var curr = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(curr.lat, curr.lng);\n        map.panTo(center);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mapStyle = {\n        width: '70vw',\n        height: '100vh',\n        float: 'right'\n      };\n      var directionsPanelStyle = {\n        width: '30vw',\n        height: '100vh'\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: \"map\",\n        style: mapStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Loading map...\"), React.createElement(\"div\", {\n        ref: \"directionsPanel\",\n        style: directionsPanelStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Loading directions panel...\"));\n    }\n  }]);\n\n  return Map;\n}(Component);\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool\n};\nMap.defaultProps = {\n  zoom: 13,\n  // San Francisco, by default\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: true\n};","map":{"version":3,"sources":["/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js"],"names":["React","Component","ReactDOM","PropTypes","Map","props","initialCenter","lat","lng","state","currentLocation","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","google","recenterMap","maps","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","haight","LatLng","oceanBeach","mapRef","refs","map","node","findDOMNode","zoom","center","mapConfig","Object","assign","setMap","curr","panTo","mapStyle","width","height","float","directionsPanelStyle","propTypes","object","number","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport class Map extends Component {\n    constructor(props) {\n        super(props);\n\n        const {lat, lng} = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.centerAroundCurrentLocation);\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((pos) => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    })\n                })\n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    loadMap() {\n        if (this.props && this.props.google) {\n            // google is available\n            const {google} = this.props;\n            const maps = google.maps;\n\n            let directionsService = new maps.DirectionsService();\n            let directionsDisplay = new maps.DirectionsRenderer();\n\n            let haight = new maps.LatLng(37.7699298, -122.4469157);\n            let oceanBeach = new maps.LatLng(37.7683909618184, -122.51089453697205);\n\n            const mapRef = this.refs.map;\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            let {initialCenter, zoom} = this.props;\n\n\n            // let {lat, lng} = initialCenter;\n            const {lat, lng} = this.state.currentLocation;\n\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign({}, {\n                // center: center,\n                center: haight,\n                zoom: zoom\n            });\n            this.map = new maps.Map(node, mapConfig);\n            directionsDisplay.setMap(this.map);\n\n\n            // var directionsService = new google.maps.DirectionsService();\n            // var directionsDisplay = new google.maps.DirectionsRenderer();\n            // var haight = new google.maps.LatLng(37.7699298, -122.4469157);\n            // var oceanBeach = new google.maps.LatLng(37.7683909618184, -122.51089453697205);\n            // var mapOptions = {\n            //     zoom: 14,\n            //     center: haight\n            // }\n            // var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n            // directionsDisplay.setMap(map);\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const curr = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(curr.lat, curr.lng);\n            map.panTo(center);\n        }\n    }\n\n    render() {\n        const mapStyle = {\n            width: '70vw',\n            height: '100vh',\n            float: 'right'\n        };\n\n        const directionsPanelStyle = {\n            width: '30vw',\n            height: '100vh'\n        };\n\n        return (\n            <div>\n                <div ref='map' style={mapStyle}>\n                    Loading map...\n                </div>\n                <div ref='directionsPanel' style={directionsPanelStyle}>\n                    Loading directions panel...\n                </div>\n            </div>\n        )\n    }\n}\n\nMap.propTypes = {\n    google: PropTypes.object,\n    zoom: PropTypes.number,\n    initialCenter: PropTypes.object,\n    centerAroundCurrentLocation: PropTypes.bool\n};\n\nMap.defaultProps = {\n    zoom: 13,\n    // San Francisco, by default\n    initialCenter: {\n        lat: 37.774929,\n        lng: -122.419416\n    },\n    centerAroundCurrentLocation: true\n};\n"]},"metadata":{},"sourceType":"module"}