{"ast":null,"code":"import _classCallCheck from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nexport var Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map() {\n    _classCallCheck(this, Map);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Map).apply(this, arguments));\n  }\n\n  _createClass(Map, [{\n    key: \"render\",\n    // constructor(props) {\n    //     super(props);\n    //\n    //     const {lat, lng} = this.props.initialCenter;\n    //     this.state = {\n    //         currentLocation: {\n    //             lat: lat,\n    //             lng: lng\n    //         }\n    //     }\n    // }\n    //\n    // componentDidMount() {\n    //     alert(0);\n    //     console.log(this.props.centerAroundCurrentLocation);\n    //     if (this.props.centerAroundCurrentLocation) {\n    //         if (navigator && navigator.geolocation) {\n    //             navigator.geolocation.getCurrentPosition((pos) => {\n    //                 const coords = pos.coords;\n    //                 this.setState({\n    //                     currentLocation: {\n    //                         lat: coords.latitude,\n    //                         lng: coords.longitude\n    //                     }\n    //                 })\n    //             })\n    //         }\n    //     }\n    //     this.loadMap();\n    // }\n    //\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.google !== this.props.google) {\n    //         this.loadMap();\n    //     }\n    //     if (prevState.currentLocation !== this.state.currentLocation) {\n    //         this.recenterMap();\n    //     }\n    // }\n    //\n    // loadMap() {\n    //     console.log(\"loading map!\");\n    //     if (this.props && this.props.google) {\n    //         // google is available\n    //         const {google} = this.props;\n    //         const maps = google.maps;\n    //\n    //         const mapRef = this.refs.map;\n    //         const node = ReactDOM.findDOMNode(mapRef);\n    //\n    //         let {initialCenter, zoom} = this.props;\n    //\n    //\n    //         // let {lat, lng} = initialCenter;\n    //         const {lat, lng} = this.state.currentLocation;\n    //\n    //         const center = new maps.LatLng(lat, lng);\n    //         const mapConfig = Object.assign({}, {\n    //             center: center,\n    //             zoom: zoom\n    //         });\n    //         this.map = new maps.Map(node, mapConfig);\n    //     }\n    // }\n    //\n    // recenterMap() {\n    //     const map = this.map;\n    //     const curr = this.state.currentLocation;\n    //\n    //     const google = this.props.google;\n    //     const maps = google.maps;\n    //\n    //     if (map) {\n    //         let center = new maps.LatLng(curr.lat, curr.lng);\n    //         map.panTo(center);\n    //     }\n    // }\n    value: function render() {\n      return React.createElement(\"div\", {\n        ref: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Loading map...\");\n    }\n  }]);\n\n  return Map;\n}(Component); // Map.propTypes = {\n//     google: PropTypes.object,\n//     zoom: PropTypes.number,\n//     initialCenter: PropTypes.object,\n//     centerAroundCurrentLocation: PropTypes.bool\n// };\n//\n// Map.defaultProps = {\n//     zoom: 13,\n//     // San Francisco, by default\n//     initialCenter: {\n//         lat: 37.774929,\n//         lng: -122.419416\n//     },\n//     centerAroundCurrentLocation: true\n// };","map":{"version":3,"sources":["/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js"],"names":["React","Component","ReactDOM","PropTypes","Map"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,WAAaC,GAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7EJ,6BA+Ea;AACL,aACI;AAAK,QAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ;AAKH;AArFL;;AAAA;AAAA,EAAyBH,SAAzB,E,CAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport class Map extends Component {\n    // constructor(props) {\n    //     super(props);\n    //\n    //     const {lat, lng} = this.props.initialCenter;\n    //     this.state = {\n    //         currentLocation: {\n    //             lat: lat,\n    //             lng: lng\n    //         }\n    //     }\n    // }\n    //\n    // componentDidMount() {\n    //     alert(0);\n    //     console.log(this.props.centerAroundCurrentLocation);\n    //     if (this.props.centerAroundCurrentLocation) {\n    //         if (navigator && navigator.geolocation) {\n    //             navigator.geolocation.getCurrentPosition((pos) => {\n    //                 const coords = pos.coords;\n    //                 this.setState({\n    //                     currentLocation: {\n    //                         lat: coords.latitude,\n    //                         lng: coords.longitude\n    //                     }\n    //                 })\n    //             })\n    //         }\n    //     }\n    //     this.loadMap();\n    // }\n    //\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.google !== this.props.google) {\n    //         this.loadMap();\n    //     }\n    //     if (prevState.currentLocation !== this.state.currentLocation) {\n    //         this.recenterMap();\n    //     }\n    // }\n    //\n    // loadMap() {\n    //     console.log(\"loading map!\");\n    //     if (this.props && this.props.google) {\n    //         // google is available\n    //         const {google} = this.props;\n    //         const maps = google.maps;\n    //\n    //         const mapRef = this.refs.map;\n    //         const node = ReactDOM.findDOMNode(mapRef);\n    //\n    //         let {initialCenter, zoom} = this.props;\n    //\n    //\n    //         // let {lat, lng} = initialCenter;\n    //         const {lat, lng} = this.state.currentLocation;\n    //\n    //         const center = new maps.LatLng(lat, lng);\n    //         const mapConfig = Object.assign({}, {\n    //             center: center,\n    //             zoom: zoom\n    //         });\n    //         this.map = new maps.Map(node, mapConfig);\n    //     }\n    // }\n    //\n    // recenterMap() {\n    //     const map = this.map;\n    //     const curr = this.state.currentLocation;\n    //\n    //     const google = this.props.google;\n    //     const maps = google.maps;\n    //\n    //     if (map) {\n    //         let center = new maps.LatLng(curr.lat, curr.lng);\n    //         map.panTo(center);\n    //     }\n    // }\n\n    render() {\n        return (\n            <div ref='map'>\n                Loading map...\n            </div>\n        )\n    }\n}\n\n// Map.propTypes = {\n//     google: PropTypes.object,\n//     zoom: PropTypes.number,\n//     initialCenter: PropTypes.object,\n//     centerAroundCurrentLocation: PropTypes.bool\n// };\n//\n// Map.defaultProps = {\n//     zoom: 13,\n//     // San Francisco, by default\n//     initialCenter: {\n//         lat: 37.774929,\n//         lng: -122.419416\n//     },\n//     centerAroundCurrentLocation: true\n// };\n"]},"metadata":{},"sourceType":"module"}