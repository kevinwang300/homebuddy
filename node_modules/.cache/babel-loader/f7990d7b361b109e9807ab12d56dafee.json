{"ast":null,"code":"import _classCallCheck from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dangdang98/Documents/homebuddy/homebuddy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool\n};\nMap.defaultProps = {\n  zoom: 13,\n  // San Francisco, by default\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: true\n};\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      alert(0);\n      console.log(this.props.centerAroundCurrentLocation);\n\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            var coords = pos.coords;\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      }\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        this.recenterMap();\n      }\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      console.log(\"loading map!\");\n\n      if (this.props && this.props.google) {\n        // google is available\n        var google = this.props.google;\n        var maps = google.maps;\n        var mapRef = this.refs.map;\n        var node = ReactDOM.findDOMNode(mapRef);\n        var _this$props = this.props,\n            initialCenter = _this$props.initialCenter,\n            zoom = _this$props.zoom; // let {lat, lng} = initialCenter;\n\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n        var center = new maps.LatLng(lat, lng);\n        var mapConfig = Object.assign({}, {\n          center: center,\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig);\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var curr = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(curr.lat, curr.lng);\n        map.panTo(center);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"hello\");\n      return React.createElement(\"div\", {\n        ref: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Loading map...\");\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/dangdang98/Documents/homebuddy/homebuddy/src/Map.js"],"names":["React","Component","ReactDOM","PropTypes","Map","propTypes","google","object","zoom","number","initialCenter","centerAroundCurrentLocation","bool","defaultProps","lat","lng","props","state","currentLocation","alert","console","log","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","recenterMap","maps","mapRef","refs","map","node","findDOMNode","center","LatLng","mapConfig","Object","assign","curr","panTo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEAC,GAAG,CAACC,SAAJ,GAAgB;AACZC,EAAAA,MAAM,EAAEH,SAAS,CAACI,MADN;AAEZC,EAAAA,IAAI,EAAEL,SAAS,CAACM,MAFJ;AAGZC,EAAAA,aAAa,EAAEP,SAAS,CAACI,MAHb;AAIZI,EAAAA,2BAA2B,EAAER,SAAS,CAACS;AAJ3B,CAAhB;AAOAR,GAAG,CAACS,YAAJ,GAAmB;AACfL,EAAAA,IAAI,EAAE,EADS;AAEf;AACAE,EAAAA,aAAa,EAAE;AACXI,IAAAA,GAAG,EAAE,SADM;AAEXC,IAAAA,GAAG,EAAE,CAAC;AAFK,GAHA;AAOfJ,EAAAA,2BAA2B,EAAE;AAPd,CAAnB;;IAUMP,G;;;;;AACF,eAAYY,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AADe,gCAGI,MAAKA,KAAL,CAAWN,aAHf;AAAA,QAGRI,GAHQ,yBAGRA,GAHQ;AAAA,QAGHC,GAHG,yBAGHA,GAHG;AAIf,UAAKE,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AACbJ,QAAAA,GAAG,EAAEA,GADQ;AAEbC,QAAAA,GAAG,EAAEA;AAFQ;AADR,KAAb;AAJe;AAUlB;;;;wCAEmB;AAAA;;AAChBI,MAAAA,KAAK,CAAC,CAAD,CAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWL,2BAAvB;;AACA,UAAI,KAAKK,KAAL,CAAWL,2BAAf,EAA4C;AACxC,YAAIW,SAAS,IAAIA,SAAS,CAACC,WAA3B,EAAwC;AACpCD,UAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,GAAD,EAAS;AAC9C,gBAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;;AACA,YAAA,MAAI,CAACC,QAAL,CAAc;AACVT,cAAAA,eAAe,EAAE;AACbJ,gBAAAA,GAAG,EAAEY,MAAM,CAACE,QADC;AAEbb,gBAAAA,GAAG,EAAEW,MAAM,CAACG;AAFC;AADP,aAAd;AAMH,WARD;AASH;AACJ;;AACD,WAAKC,OAAL;AACH;;;uCAEkBC,S,EAAWC,S,EAAW;AACrC,UAAID,SAAS,CAACzB,MAAV,KAAqB,KAAKU,KAAL,CAAWV,MAApC,EAA4C;AACxC,aAAKwB,OAAL;AACH;;AACD,UAAIE,SAAS,CAACd,eAAV,KAA8B,KAAKD,KAAL,CAAWC,eAA7C,EAA8D;AAC1D,aAAKe,WAAL;AACH;AACJ;;;8BAES;AACNb,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,UAAI,KAAKL,KAAL,IAAc,KAAKA,KAAL,CAAWV,MAA7B,EAAqC;AACjC;AADiC,YAE1BA,MAF0B,GAEhB,KAAKU,KAFW,CAE1BV,MAF0B;AAGjC,YAAM4B,IAAI,GAAG5B,MAAM,CAAC4B,IAApB;AAEA,YAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,GAAzB;AACA,YAAMC,IAAI,GAAGpC,QAAQ,CAACqC,WAAT,CAAqBJ,MAArB,CAAb;AANiC,0BAQL,KAAKnB,KARA;AAAA,YAQ5BN,aAR4B,eAQ5BA,aAR4B;AAAA,YAQbF,IARa,eAQbA,IARa,EAWjC;;AAXiC,oCAYd,KAAKS,KAAL,CAAWC,eAZG;AAAA,YAY1BJ,GAZ0B,yBAY1BA,GAZ0B;AAAA,YAYrBC,GAZqB,yBAYrBA,GAZqB;AAcjC,YAAMyB,MAAM,GAAG,IAAIN,IAAI,CAACO,MAAT,CAAgB3B,GAAhB,EAAqBC,GAArB,CAAf;AACA,YAAM2B,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAChCJ,UAAAA,MAAM,EAAEA,MADwB;AAEhChC,UAAAA,IAAI,EAAEA;AAF0B,SAAlB,CAAlB;AAIA,aAAK6B,GAAL,GAAW,IAAIH,IAAI,CAAC9B,GAAT,CAAakC,IAAb,EAAmBI,SAAnB,CAAX;AACH;AACJ;;;kCAEa;AACV,UAAML,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMQ,IAAI,GAAG,KAAK5B,KAAL,CAAWC,eAAxB;AAEA,UAAMZ,MAAM,GAAG,KAAKU,KAAL,CAAWV,MAA1B;AACA,UAAM4B,IAAI,GAAG5B,MAAM,CAAC4B,IAApB;;AAEA,UAAIG,GAAJ,EAAS;AACL,YAAIG,MAAM,GAAG,IAAIN,IAAI,CAACO,MAAT,CAAgBI,IAAI,CAAC/B,GAArB,EAA0B+B,IAAI,CAAC9B,GAA/B,CAAb;AACAsB,QAAAA,GAAG,CAACS,KAAJ,CAAUN,MAAV;AACH;AACJ;;;6BAEQ;AACLpB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,aACI;AAAK,QAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ;AAKH;;;;EAtFapB,S;;AAyFlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nMap.propTypes = {\n    google: PropTypes.object,\n    zoom: PropTypes.number,\n    initialCenter: PropTypes.object,\n    centerAroundCurrentLocation: PropTypes.bool\n};\n\nMap.defaultProps = {\n    zoom: 13,\n    // San Francisco, by default\n    initialCenter: {\n        lat: 37.774929,\n        lng: -122.419416\n    },\n    centerAroundCurrentLocation: true\n};\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        const {lat, lng} = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        }\n    }\n\n    componentDidMount() {\n        alert(0);\n        console.log(this.props.centerAroundCurrentLocation);\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((pos) => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    })\n                })\n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    loadMap() {\n        console.log(\"loading map!\");\n        if (this.props && this.props.google) {\n            // google is available\n            const {google} = this.props;\n            const maps = google.maps;\n\n            const mapRef = this.refs.map;\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            let {initialCenter, zoom} = this.props;\n\n\n            // let {lat, lng} = initialCenter;\n            const {lat, lng} = this.state.currentLocation;\n\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign({}, {\n                center: center,\n                zoom: zoom\n            });\n            this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const curr = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(curr.lat, curr.lng);\n            map.panTo(center);\n        }\n    }\n\n    render() {\n        console.log(\"hello\");\n        return (\n            <div ref='map'>\n                Loading map...\n            </div>\n        )\n    }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}